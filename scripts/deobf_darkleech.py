import re
import subprocess
import sys

"""
A short script to automate Darkleech redirect JS deobfuscation described here:
https://blogs.mcafee.com/mcafee-labs/seeing-darkleech-obfuscation-quick-hack-iframes/
"""

if len(sys.argv) < 2:
	print "[!]Usage: deobf_darkleech.py <filename>"
	sys.exit(-1)
	
try:
	#open file
	f = open(sys.argv[1])
	data = f.read()
	f.close()
	
	#the darkleech obfuscated JS should be within <script> tags and the other data with <span> tags
	#if possible cleanup everything else
	m = re.search( r'(<span.+?>)(.+?)(</span><script>)(.+?)(</script>)', data.replace('\n','').replace('\r',''),flags=re.DOTALL)
	if m:
		js = m.group(4)
		span = m.group(2)
	else:
		print "[!]No data found in input file, exiting..."
		sys.exit(-1)
	
	js_split = js.split(';')

	#Step 1: Replace the function_name with 'console.log' and remove the function call (the parentheses).
	match_found = False
	for i in range(len(js_split)):
		match = re.match( r'(.*)\((.*)\)(\(\))', js_split[i])
		if match:
			js_split[i] = js_split[i].replace(match.group(1),'console.log')
			js_split[i] = js_split[i].replace(match.group(3),'')
			match_found = True
			break
	
	if not match_found:
		print "[!]No data found at Step #1, exiting..."
		sys.exit(-1)

	js = ';\n'.join(js_split)
	
	#write the result to a file
	f = open('darkl_step1.js','w')
	f.write(js)
	f.close()

	#run the new JS and capture the console.log output
	proc = subprocess.Popen(["node", "darkl_step1.js"],stdout=subprocess.PIPE)
	js2 = proc.stdout.readline()

	"""
	New result will look something like this:
	
	a=document.getElementById("finalConst").innerHTML.replace(/[^\d ]/g,"").split(" ");for(i=(+[window.sidebar])+(+[window.chrome]);i<a.length;i++)a[i]=parseInt(a[i])^64;c="constructor";[][c][c](String.fromCharCode.apply(null,a))();
	
	Step 2: Apply modifications:
	Modify the original statement at line 12 by changing the value of variable "i" to zero.
Original statement:        i = (+[window.sidebar]) + (+[window.chrome]);
Modified statement:      i = 0;
Also, remove the function call "()" and "[]" and modify the function call statement:
Original statement:        [][c][c](String.fromCharCode.apply(null, a))();
Modified statement:      temp = [c][c](String.fromCharCode.apply(null, a));
   alert(temp);
	
	"""
	#The JS would take the <span> content from a HTML page, we replace it by a static variable
	m = re.match(r'(.*)(document\.getElementById\(".*"\)\.innerHTML)(.*)',js2)

	if not m:
		print "[!]No data found at Step #2, exiting..."
		sys.exit(-1)

	js2 = m.group(1) + '"' + span + '"' + m.group(3).replace('[][c][c]','console.log([c][c]').replace('()',')').replace('(+[window.sidebar])+(+[window.chrome])','0')

	#write the result to a file
	f = open('darkl_step2.js','w')
	f.write(js2)
	f.close()

	#run the new JS and capture the console.log output
	proc = subprocess.Popen(["node", "darkl_step2.js"],stdout=subprocess.PIPE)
	js3 = proc.stdout.readline()

	#print js3

	"""
	The new JS will look like this:
	
	[ 'offscreenBufferingOnmousemove=(+[window.sidebar])+(+[window.chrome]);clearIntervalClientInformation=["rv:11","MSIE",];for(enumAnchor=offscreenBufferingOnmousemove;enumAnchor<clearIntervalClientInformation.length;enumAnchor++){if(navigator.userAgent.indexOf(clearIntervalClientInformation[enumAnchor])>offscreenBufferingOnmousemove){pkcs11Export=clearIntervalClientInformation.length-enumAnchor;break;}}if(navigator.userAgent.indexOf("MSIE 10")>offscreenBufferingOnmousemove){pkcs11Export++;}historyJava="qokGbZ8z7KfCsIr";getClassPageXOffset=document.getElementById("finalConst").innerHTML;evalOpener=encodeURIComponentOuterWidth=offscreenBufferingOnmousemove;prototypeConst="";getClassPageXOffset=getClassPageXOffset.replace(/[^a-z]/g,"");for(enumAnchor=offscreenBufferingOnmousemove;enumAnchor<getClassPageXOffset.length;enumAnchor++){decodeURIVoid=getClassPageXOffset.charCodeAt(enumAnchor);if(evalOpener%pkcs11Export){prototypeConst+=String.fromCharCode(((mimeTypesOnsubmit+decodeURIVoid-97)^historyJava.charCodeAt(encodeURIComponentOuterWidth%historyJava.length))%255);encodeURIComponentOuterWidth++;}else{mimeTypesOnsubmit=(decodeURIVoid-97)*13*pkcs11Export;}evalOpener++;}[]["constructor"]["constructor"](prototypeConst)();' ]
	
	Step 3:
	
	Modify the original statement at line 20 by replacing the value of variable "ArrayTry" to zero.
Original statement:        ArrayTry = (+[window.sidebar]) + (+[window.chrome]);
Modified statement:      ArrayTry = 0;
Change the if statement on line 23 to make the condition true:
Original statement:        if (navigator.userAgent.indexOf(pkcs11Typeof[throwImage]) > ArrayTry) {
Modified statement:      if (true) {
Also change the if statement on line 28 to skip the condition:
Original statement:        if (navigator.userAgent.indexOf("MSIE 10") > ArrayTry) {
Modified statement:      if (false) {
Finally, remove the function call "()" and "[]" and modify the function call statement:
Original statement:        []["constructor"]["constructor"](setIntervalInfinity)();
Modified statement:      tempA = ["constructor"]["constructor"](setIntervalInfinity);
   alert(tempA);
	"""

	js3 = js3.replace('(+[window.sidebar])+(+[window.chrome])','0')

	#remove leading and ending brackets around the JS
	m = re.match(r'(\[ \')(.*)(\' \])',js3)
	js3 = m.group(2)

	m = re.match(r'(.*)(if\()(navigator\.userAgent\.indexOf\("MSIE.*?)(\)\{.*)',js3)
	if not m:
		print "[!]No data found at Step #3.1, exiting..."
		sys.exit(-1)
	js3 = m.group(1) + m.group(2) + 'false' + m.group(4)

	m = re.match(r'(.*)(if\()(navigator\.userAgent\.indexOf.*?)(\)\{.*)',js3)
	if not m:
		print "[!]No data found at Step #3.2, exiting..."
		sys.exit(-1)
	js3 = m.group(1) + m.group(2) + 'true' + m.group(4)

	#The JS would take the <span> content from a HTML page, we replace it by a static variable
	m = re.match(r'(.*)(document\.getElementById\(".*"\)\.innerHTML)(.*)',js3)
	if not m:
		print "[!]No data found at Step #3.3, exiting..."
		sys.exit(-1)	
	js3 = m.group(1) + '"' + span + '"' + m.group(3).replace('[]["constructor"]["constructor"]','console.log(["constructor"]["constructor"]').replace('()',')')

	#write the result to a file
	f = open('darkl_step3.js','w')
	f.write(js3)
	f.close()

	#run the new JS and capture the console.log output
	proc = subprocess.Popen(["node", "darkl_step3.js"],stdout=subprocess.PIPE)
	js4 = proc.stdout.readline()

	#js4 = final deobfuscated script, extract link
	m = re.match(r'(.*)(iframe src=")(.*?)(".*)',js4)
	print m.group(3)
	
except IOError,e:
	print "[!]An IOError occured: " + str(e)
